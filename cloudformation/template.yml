AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: DukeLegion
  InstanceTypeParameter:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.micro
    Description: Enter instance size.
  AMI:
    Type: String
    Default: ami-07ebfd5b3428b6f4d
  PostgresMasterPassword:
    Type: String
    Description: The password for the master user
    MinLength: 8
    ConstraintDescription: Must be a string of length >= 8
    Default: postgres
    NoEcho: true
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: Name
          Value: Tomcat HA VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Web access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Sub '0.0.0.0/0'
  TomcatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Web access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8009'
          ToPort: '8009'
          CidrIp: !Sub '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Sub '0.0.0.0/0'
  TomcatOneENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Tomcat 1 network interface
      SourceDestCheck: 'false'
      GroupSet:
        - Ref: TomcatSecurityGroup
      SubnetId: !Ref SubnetA
      PrivateIpAddress: 10.0.0.10
  TomcatOne:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref TomcatOneENI
          DeviceIndex: 0
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref KeyPair
      Tags:
        -
          Key: Name
          Value: "Tomcat 1"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          sudo apt-get install git -y
          git clone https://github.com/mcasperson/TomcatHA.git
          cd TomcatHA
          curl -s -L https://raw.githubusercontent.com/OctopusDeploy/OctopusGuides/master/install.sh | FACTER_tomcat_name=worker1 bash -s tomcat.pp
  TomcatTwoENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Tomcat 1 network interface
      SourceDestCheck: 'false'
      GroupSet:
        - Ref: TomcatSecurityGroup
      SubnetId: !Ref SubnetA
      PrivateIpAddress: 10.0.0.11
  TomcatTwo:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref TomcatTwoENI
          DeviceIndex: 0
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref KeyPair
      Tags:
        -
          Key: Name
          Value: "Tomcat 2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          sudo apt-get install git -y
          git clone https://github.com/mcasperson/TomcatHA.git
          cd TomcatHA
          curl -s -L https://raw.githubusercontent.com/OctopusDeploy/OctopusGuides/master/install.sh | FACTER_tomcat_name=worker2 bash -s tomcat.pp
  LoadBalancerOneENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Tomcat 1 network interface
      SourceDestCheck: 'false'
      GroupSet:
        - Ref: LoadBalancerSecurityGroup
      SubnetId: !Ref SubnetA
      PrivateIpAddress: 10.0.0.20
  LoadBalancerOne:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref LoadBalancerOneENI
          DeviceIndex: 0
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref KeyPair
      Tags:
        -
          Key: Name
          Value: "Apache2 Load Balancer 1"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          sudo apt-get install git -y
          git clone https://github.com/mcasperson/TomcatHA.git
          cd TomcatHA
          curl -s -L https://raw.githubusercontent.com/OctopusDeploy/OctopusGuides/master/install.sh | FACTER_worker1_ip=10.0.0.10 FACTER_worker2_ip=10.0.0.11 bash -s apachelb.pp
  WebElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref LoadBalancerOne

  PostgresComponentSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'PostgresSQL Security Group'
      GroupDescription: Security Group which grants anyone access to Postgres
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: '0.0.0.0/0'

  PostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'Database subnet group for ${AWS::StackName}'
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

  Postgres:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBSubnetGroupName: !Ref PostgresSubnetGroup
      Engine: postgres
      # https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html
      EngineVersion: "11.6"
      MasterUsername: "postgres"
      MasterUserPassword: !Ref PostgresMasterPassword
      DBName: "postgres"
      DBInstanceClass: "db.t3.small"
      BackupRetentionPeriod: 1
      MultiAZ: false
      VPCSecurityGroups:
        - !Ref PostgresComponentSG
      PubliclyAccessible: false
      DBInstanceIdentifier: !Sub '${AWS::StackName}'
      StorageEncrypted: false

Outputs:
  VPCID:
    Value: !Ref VPC
    Description: VPC ID
  SubnetAID:
    Value: !Ref SubnetA
    Description: Subnet A ID
  PublicIp:
    Value:
      Fn::GetAtt:
        - LoadBalancerOne
        - PublicIp
    Description: Server's PublicIp Address